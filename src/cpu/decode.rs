use crate::{
    cpu::{
        operand::{Cond, Direct16, Direct8, Imm16, Imm8, Indirect, Reg16, Reg8, IO8},
        Cpu,
    },
    mem::Memory,
};

impl Cpu {
    pub fn decode(&mut self, mem: &mut Memory) {
        if self.ctx.cb {
            self.cb_decode(mem);
            return;
        }
        match self.ctx.opcode {
            0x00 => self.nop(mem),
            0x20 => self.jr_c(mem, Cond::NZ),
            0x30 => self.jr_c(mem, Cond::NC),
            0x01 => self.ld16(mem, Reg16::BC, Imm16),
            0x11 => self.ld16(mem, Reg16::DE, Imm16),
            0x21 => self.ld16(mem, Reg16::HL, Imm16),
            0x31 => self.ld16(mem, Reg16::SP, Imm16),
            0x02 => self.ld(mem, Indirect::BC, Reg8::A),
            0x12 => self.ld(mem, Indirect::DE, Reg8::A),
            0x22 => self.ld(mem, Indirect::HLI, Reg8::A),
            0x32 => self.ld(mem, Indirect::HLD, Reg8::A),
            0x03 => self.inc16(mem, Reg16::BC),
            0x13 => self.inc16(mem, Reg16::DE),
            0x23 => self.inc16(mem, Reg16::HL),
            0x33 => self.inc16(mem, Reg16::SP),
            0x04 => self.inc(mem, Reg8::B),
            0x14 => self.inc(mem, Reg8::D),
            0x24 => self.inc(mem, Reg8::H),
            0x34 => self.inc(mem, Indirect::HL),
            0x05 => self.dec(mem, Reg8::B),
            0x15 => self.dec(mem, Reg8::D),
            0x25 => self.dec(mem, Reg8::H),
            0x35 => self.dec(mem, Indirect::HL),
            0x06 => self.ld(mem, Reg8::B, Imm8),
            0x16 => self.ld(mem, Reg8::D, Imm8),
            0x26 => self.ld(mem, Reg8::H, Imm8),
            0x36 => self.ld(mem, Indirect::HL, Imm8),
            0x08 => self.ld16(mem, Direct16, Reg16::SP),
            0x18 => self.jr(mem),
            0x28 => self.jr_c(mem, Cond::Z),
            0x38 => self.jr_c(mem, Cond::C),
            0x0A => self.ld(mem, Reg8::A, Indirect::BC),
            0x1A => self.ld(mem, Reg8::A, Indirect::DE),
            0x2A => self.ld(mem, Reg8::A, Indirect::HLI),
            0x3A => self.ld(mem, Reg8::A, Indirect::HLD),
            0x0B => self.dec16(mem, Reg16::BC),
            0x1B => self.dec16(mem, Reg16::DE),
            0x2B => self.dec16(mem, Reg16::HL),
            0x3B => self.dec16(mem, Reg16::SP),
            0x0C => self.inc(mem, Reg8::C),
            0x1C => self.inc(mem, Reg8::E),
            0x2C => self.inc(mem, Reg8::L),
            0x3C => self.inc(mem, Reg8::A),
            0x0D => self.dec(mem, Reg8::C),
            0x1D => self.dec(mem, Reg8::E),
            0x2D => self.dec(mem, Reg8::L),
            0x3D => self.dec(mem, Reg8::A),
            0x0E => self.ld(mem, Reg8::C, Imm8),
            0x1E => self.ld(mem, Reg8::E, Imm8),
            0x2E => self.ld(mem, Reg8::L, Imm8),
            0x3E => self.ld(mem, Reg8::A, Imm8),
            0x40 => self.ld(mem, Reg8::B, Reg8::B),
            0x50 => self.ld(mem, Reg8::D, Reg8::B),
            0x60 => self.ld(mem, Reg8::H, Reg8::B),
            0x70 => self.ld(mem, Indirect::HL, Reg8::B),
            0x41 => self.ld(mem, Reg8::B, Reg8::C),
            0x51 => self.ld(mem, Reg8::D, Reg8::C),
            0x61 => self.ld(mem, Reg8::H, Reg8::C),
            0x71 => self.ld(mem, Indirect::HL, Reg8::C),
            0x42 => self.ld(mem, Reg8::B, Reg8::D),
            0x52 => self.ld(mem, Reg8::D, Reg8::D),
            0x62 => self.ld(mem, Reg8::H, Reg8::D),
            0x72 => self.ld(mem, Indirect::HL, Reg8::D),
            0x43 => self.ld(mem, Reg8::B, Reg8::E),
            0x53 => self.ld(mem, Reg8::D, Reg8::E),
            0x63 => self.ld(mem, Reg8::H, Reg8::E),
            0x73 => self.ld(mem, Indirect::HL, Reg8::E),
            0x44 => self.ld(mem, Reg8::B, Reg8::H),
            0x54 => self.ld(mem, Reg8::D, Reg8::H),
            0x64 => self.ld(mem, Reg8::H, Reg8::H),
            0x74 => self.ld(mem, Indirect::HL, Reg8::H),
            0x45 => self.ld(mem, Reg8::B, Reg8::L),
            0x55 => self.ld(mem, Reg8::D, Reg8::L),
            0x65 => self.ld(mem, Reg8::H, Reg8::L),
            0x75 => self.ld(mem, Indirect::HL, Reg8::L),
            0x46 => self.ld(mem, Reg8::B, Indirect::HL),
            0x56 => self.ld(mem, Reg8::D, Indirect::HL),
            0x66 => self.ld(mem, Reg8::H, Indirect::HL),
            0x47 => self.ld(mem, Reg8::B, Reg8::A),
            0x57 => self.ld(mem, Reg8::D, Reg8::A),
            0x67 => self.ld(mem, Reg8::H, Reg8::A),
            0x77 => self.ld(mem, Indirect::HL, Reg8::A),
            0x48 => self.ld(mem, Reg8::C, Reg8::B),
            0x58 => self.ld(mem, Reg8::E, Reg8::B),
            0x68 => self.ld(mem, Reg8::L, Reg8::B),
            0x78 => self.ld(mem, Reg8::A, Reg8::B),
            0x49 => self.ld(mem, Reg8::C, Reg8::C),
            0x59 => self.ld(mem, Reg8::E, Reg8::C),
            0x69 => self.ld(mem, Reg8::L, Reg8::C),
            0x79 => self.ld(mem, Reg8::A, Reg8::C),
            0x4A => self.ld(mem, Reg8::C, Reg8::D),
            0x5A => self.ld(mem, Reg8::E, Reg8::D),
            0x6A => self.ld(mem, Reg8::L, Reg8::D),
            0x7A => self.ld(mem, Reg8::A, Reg8::D),
            0x4B => self.ld(mem, Reg8::C, Reg8::E),
            0x5B => self.ld(mem, Reg8::E, Reg8::E),
            0x6B => self.ld(mem, Reg8::L, Reg8::E),
            0x7B => self.ld(mem, Reg8::A, Reg8::E),
            0x4C => self.ld(mem, Reg8::C, Reg8::H),
            0x5C => self.ld(mem, Reg8::E, Reg8::H),
            0x6C => self.ld(mem, Reg8::L, Reg8::H),
            0x7C => self.ld(mem, Reg8::A, Reg8::H),
            0x4D => self.ld(mem, Reg8::C, Reg8::L),
            0x5D => self.ld(mem, Reg8::E, Reg8::L),
            0x6D => self.ld(mem, Reg8::L, Reg8::L),
            0x7D => self.ld(mem, Reg8::A, Reg8::L),
            0x4E => self.ld(mem, Reg8::C, Indirect::HL),
            0x5E => self.ld(mem, Reg8::E, Indirect::HL),
            0x6E => self.ld(mem, Reg8::L, Indirect::HL),
            0x7E => self.ld(mem, Reg8::A, Indirect::HL),
            0x4F => self.ld(mem, Reg8::C, Reg8::A),
            0x5F => self.ld(mem, Reg8::E, Reg8::A),
            0x6F => self.ld(mem, Reg8::L, Reg8::A),
            0x7F => self.ld(mem, Reg8::A, Reg8::A),
            0xB8 => self.cp(mem, Reg8::B),
            0xB9 => self.cp(mem, Reg8::C),
            0xBA => self.cp(mem, Reg8::D),
            0xBB => self.cp(mem, Reg8::E),
            0xBC => self.cp(mem, Reg8::H),
            0xBD => self.cp(mem, Reg8::L),
            0xBE => self.cp(mem, Indirect::HL),
            0xBF => self.cp(mem, Reg8::A),
            0xE0 => self.ld(mem, Direct8::DFF, Reg8::A),
            0xF0 => self.ld(mem, Reg8::A, Direct8::DFF),
            0xC1 => self.pop(mem, Reg16::BC),
            0xD1 => self.pop(mem, Reg16::DE),
            0xE1 => self.pop(mem, Reg16::HL),
            0xF1 => self.pop(mem, Reg16::AF),
            0xE2 => self.ld(mem, Indirect::CFF, Reg8::A),
            0xF2 => self.ld(mem, Reg8::A, Indirect::CFF),
            0xC3 => self.jp(mem),
            0xC5 => self.push(mem, Reg16::BC),
            0xD5 => self.push(mem, Reg16::DE),
            0xE5 => self.push(mem, Reg16::HL),
            0xF5 => self.push(mem, Reg16::AF),
            0xC9 => self.ret(mem),
            0xEA => self.ld(mem, Direct8::D, Reg8::A),
            0xFA => self.ld(mem, Reg8::A, Direct8::D),
            0xCB => self.cb_prefixed(mem),
            0xCD => self.call(mem),
            0xFE => self.cp(mem, Imm8),
            _ => panic!("Unknown opcode: {:02X}", self.ctx.opcode),
        }
    }

    pub fn cb_decode(&mut self, mem: &mut Memory) {
        match self.ctx.opcode {
            0x10 => self.rl(mem, Reg8::B),
            0x11 => self.rl(mem, Reg8::C),
            0x12 => self.rl(mem, Reg8::D),
            0x13 => self.rl(mem, Reg8::E),
            0x14 => self.rl(mem, Reg8::H),
            0x15 => self.rl(mem, Reg8::L),
            0x16 => self.rl(mem, Indirect::HL),
            0x17 => self.rl(mem, Reg8::A),
            0x40 => self.bit(mem, 0, Reg8::B),
            0x50 => self.bit(mem, 2, Reg8::B),
            0x60 => self.bit(mem, 4, Reg8::B),
            0x70 => self.bit(mem, 6, Reg8::B),
            0x41 => self.bit(mem, 0, Reg8::C),
            0x51 => self.bit(mem, 2, Reg8::C),
            0x61 => self.bit(mem, 4, Reg8::C),
            0x71 => self.bit(mem, 6, Reg8::C),
            0x42 => self.bit(mem, 0, Reg8::D),
            0x52 => self.bit(mem, 2, Reg8::D),
            0x62 => self.bit(mem, 4, Reg8::D),
            0x72 => self.bit(mem, 6, Reg8::D),
            0x43 => self.bit(mem, 0, Reg8::E),
            0x53 => self.bit(mem, 2, Reg8::E),
            0x63 => self.bit(mem, 4, Reg8::E),
            0x73 => self.bit(mem, 6, Reg8::E),
            0x44 => self.bit(mem, 0, Reg8::H),
            0x54 => self.bit(mem, 2, Reg8::H),
            0x64 => self.bit(mem, 4, Reg8::H),
            0x74 => self.bit(mem, 6, Reg8::H),
            0x45 => self.bit(mem, 0, Reg8::L),
            0x55 => self.bit(mem, 2, Reg8::L),
            0x65 => self.bit(mem, 4, Reg8::L),
            0x75 => self.bit(mem, 6, Reg8::L),
            0x46 => self.bit(mem, 0, Indirect::HL),
            0x56 => self.bit(mem, 2, Indirect::HL),
            0x66 => self.bit(mem, 4, Indirect::HL),
            0x76 => self.bit(mem, 6, Indirect::HL),
            0x47 => self.bit(mem, 0, Reg8::A),
            0x57 => self.bit(mem, 2, Reg8::A),
            0x67 => self.bit(mem, 4, Reg8::A),
            0x77 => self.bit(mem, 6, Reg8::A),
            0x48 => self.bit(mem, 1, Reg8::B),
            0x58 => self.bit(mem, 3, Reg8::B),
            0x68 => self.bit(mem, 5, Reg8::B),
            0x78 => self.bit(mem, 7, Reg8::B),
            0x49 => self.bit(mem, 1, Reg8::C),
            0x59 => self.bit(mem, 3, Reg8::C),
            0x69 => self.bit(mem, 5, Reg8::C),
            0x79 => self.bit(mem, 7, Reg8::C),
            0x4A => self.bit(mem, 1, Reg8::D),
            0x5A => self.bit(mem, 3, Reg8::D),
            0x6A => self.bit(mem, 5, Reg8::D),
            0x7A => self.bit(mem, 7, Reg8::D),
            0x4B => self.bit(mem, 1, Reg8::E),
            0x5B => self.bit(mem, 3, Reg8::E),
            0x6B => self.bit(mem, 5, Reg8::E),
            0x7B => self.bit(mem, 7, Reg8::E),
            0x4C => self.bit(mem, 1, Reg8::H),
            0x5C => self.bit(mem, 3, Reg8::H),
            0x6C => self.bit(mem, 5, Reg8::H),
            0x7C => self.bit(mem, 7, Reg8::H),
            0x4D => self.bit(mem, 1, Reg8::L),
            0x5D => self.bit(mem, 3, Reg8::L),
            0x6D => self.bit(mem, 5, Reg8::L),
            0x7D => self.bit(mem, 7, Reg8::L),
            0x4E => self.bit(mem, 1, Indirect::HL),
            0x5E => self.bit(mem, 3, Indirect::HL),
            0x6E => self.bit(mem, 5, Indirect::HL),
            0x7E => self.bit(mem, 7, Indirect::HL),
            0x4F => self.bit(mem, 1, Reg8::A),
            0x5F => self.bit(mem, 3, Reg8::A),
            0x6F => self.bit(mem, 5, Reg8::A),
            0x7F => self.bit(mem, 7, Reg8::A),
            0x80 => self.res(mem, 0, Reg8::B),
            0x90 => self.res(mem, 2, Reg8::B),
            0xA0 => self.res(mem, 4, Reg8::B),
            0xB0 => self.res(mem, 6, Reg8::B),
            0x81 => self.res(mem, 0, Reg8::C),
            0x91 => self.res(mem, 2, Reg8::C),
            0xA1 => self.res(mem, 4, Reg8::C),
            0xB1 => self.res(mem, 6, Reg8::C),
            0x82 => self.res(mem, 0, Reg8::D),
            0x92 => self.res(mem, 2, Reg8::D),
            0xA2 => self.res(mem, 4, Reg8::D),
            0xB2 => self.res(mem, 6, Reg8::D),
            0x83 => self.res(mem, 0, Reg8::E),
            0x93 => self.res(mem, 2, Reg8::E),
            0xA3 => self.res(mem, 4, Reg8::E),
            0xB3 => self.res(mem, 6, Reg8::E),
            0x84 => self.res(mem, 0, Reg8::H),
            0x94 => self.res(mem, 2, Reg8::H),
            0xA4 => self.res(mem, 4, Reg8::H),
            0xB4 => self.res(mem, 6, Reg8::H),
            0x85 => self.res(mem, 0, Reg8::L),
            0x95 => self.res(mem, 2, Reg8::L),
            0xA5 => self.res(mem, 4, Reg8::L),
            0xB5 => self.res(mem, 6, Reg8::L),
            0x86 => self.res(mem, 0, Indirect::HL),
            0x96 => self.res(mem, 2, Indirect::HL),
            0xA6 => self.res(mem, 4, Indirect::HL),
            0xB6 => self.res(mem, 6, Indirect::HL),
            0x87 => self.res(mem, 0, Reg8::A),
            0x97 => self.res(mem, 2, Reg8::A),
            0xA7 => self.res(mem, 4, Reg8::A),
            0xB7 => self.res(mem, 6, Reg8::A),
            0x88 => self.res(mem, 1, Reg8::B),
            0x98 => self.res(mem, 3, Reg8::B),
            0xA8 => self.res(mem, 5, Reg8::B),
            0xB8 => self.res(mem, 7, Reg8::B),
            0x89 => self.res(mem, 1, Reg8::C),
            0x99 => self.res(mem, 3, Reg8::C),
            0xA9 => self.res(mem, 5, Reg8::C),
            0xB9 => self.res(mem, 7, Reg8::C),
            0x8A => self.res(mem, 1, Reg8::D),
            0x9A => self.res(mem, 3, Reg8::D),
            0xAA => self.res(mem, 5, Reg8::D),
            0xBA => self.res(mem, 7, Reg8::D),
            0x8B => self.res(mem, 1, Reg8::E),
            0x9B => self.res(mem, 3, Reg8::E),
            0xAB => self.res(mem, 5, Reg8::E),
            0xBB => self.res(mem, 7, Reg8::E),
            0x8C => self.res(mem, 1, Reg8::H),
            0x9C => self.res(mem, 3, Reg8::H),
            0xAC => self.res(mem, 5, Reg8::H),
            0xBC => self.res(mem, 7, Reg8::H),
            0x8D => self.res(mem, 1, Reg8::L),
            0x9D => self.res(mem, 3, Reg8::L),
            0xAD => self.res(mem, 5, Reg8::L),
            0xBD => self.res(mem, 7, Reg8::L),
            0x8E => self.res(mem, 1, Indirect::HL),
            0x9E => self.res(mem, 3, Indirect::HL),
            0xAE => self.res(mem, 5, Indirect::HL),
            0xBE => self.res(mem, 7, Indirect::HL),
            0x8F => self.res(mem, 1, Reg8::A),
            0x9F => self.res(mem, 3, Reg8::A),
            0xAF => self.res(mem, 5, Reg8::A),
            0xBF => self.res(mem, 7, Reg8::A),
            _ => panic!("Unknown opcode: {:02X}", self.ctx.opcode),
        }
    }

    pub fn cb_prefixed(&mut self, mem: &mut Memory) {
        if let Some(v) = self.read8(mem, Imm8) {
            self.ctx.opcode = v;
            self.ctx.cb = true;
            self.cb_decode(mem);
        }
    }
}
